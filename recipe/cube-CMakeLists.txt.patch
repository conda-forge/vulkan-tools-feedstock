diff --git a/cube/CMakeLists.txt b/cube/CMakeLists.txt
index 4ecd3e36..16aea8c8 100644
--- a/cube/CMakeLists.txt
+++ b/cube/CMakeLists.txt
@@ -106,47 +106,47 @@ if (CMAKE_SYSTEM_NAME MATCHES "Linux|BSD|GNU")
 
         add_custom_command(COMMENT "Generating wayland client protocol dispatch data"
                           OUTPUT wayland-client.c
-                          COMMAND ${WAYLAND_SCANNER_EXECUTABLE}
+                          COMMAND "${WAYLAND_SCANNER_EXECUTABLE}"
                                   private-code
-                                  ${WAYLAND_CODE_PROTOCOL}
-                                  ${CMAKE_CURRENT_BINARY_DIR}/wayland-client.c
-                          MAIN_DEPENDENCY ${WAYLAND_CODE_PROTOCOL}
-                          DEPENDS ${WAYLAND_CODE_PROTOCOL} ${WAYLAND_SCANNER_EXECUTABLE})
+                                  "${WAYLAND_CODE_PROTOCOL}"
+                                  "${CMAKE_CURRENT_BINARY_DIR}/wayland-client.c"
+                          MAIN_DEPENDENCY "${WAYLAND_CODE_PROTOCOL}"
+                          DEPENDS "${WAYLAND_CODE_PROTOCOL}" "${WAYLAND_SCANNER_EXECUTABLE}")
 
         add_custom_command(COMMENT "Generating xdg-shell protocol dispatch data"
                            OUTPUT xdg-shell-code.c
-                           COMMAND ${WAYLAND_SCANNER_EXECUTABLE}
+                           COMMAND "${WAYLAND_SCANNER_EXECUTABLE}"
                                    private-code
-                                   ${XDG_SHELL_PROTOCOL}
-                                   ${CMAKE_CURRENT_BINARY_DIR}/xdg-shell-code.c
-                           MAIN_DEPENDENCY ${XDG_SHELL_PROTOCOL}
-                           DEPENDS ${XDG_SHELL_PROTOCOL} ${WAYLAND_SCANNER_EXECUTABLE})
+                                   "${XDG_SHELL_PROTOCOL}"
+                                   "${CMAKE_CURRENT_BINARY_DIR}/xdg-shell-code.c"
+                           MAIN_DEPENDENCY "${XDG_SHELL_PROTOCOL}"
+                           DEPENDS "${XDG_SHELL_PROTOCOL}" "${WAYLAND_SCANNER_EXECUTABLE}")
         add_custom_command(COMMENT "Generating xdg-shell protocol header"
                            OUTPUT xdg-shell-client-header.h
-                           COMMAND ${WAYLAND_SCANNER_EXECUTABLE}
+                           COMMAND "${WAYLAND_SCANNER_EXECUTABLE}"
                                    client-header
-                                   ${XDG_SHELL_PROTOCOL}
-                                   ${CMAKE_CURRENT_BINARY_DIR}/xdg-shell-client-header.h
-                           MAIN_DEPENDENCY ${XDG_SHELL_PROTOCOL}
-                           DEPENDS ${XDG_SHELL_PROTOCOL} ${WAYLAND_SCANNER_EXECUTABLE})
+                                   "${XDG_SHELL_PROTOCOL}"
+                                   "${CMAKE_CURRENT_BINARY_DIR}/xdg-shell-client-header.h"
+                           MAIN_DEPENDENCY "${XDG_SHELL_PROTOCOL}"
+                           DEPENDS "${XDG_SHELL_PROTOCOL}" "${WAYLAND_SCANNER_EXECUTABLE}")
 
         set(XDG_DECORATION_PROTOCOL ${WAYLAND_PROTOCOLS_PATH}/unstable/xdg-decoration/xdg-decoration-unstable-v1.xml)
         add_custom_command(COMMENT "Generating xdg-decoration protocol dispatch data"
                            OUTPUT xdg-decoration-code.c
-                           COMMAND ${WAYLAND_SCANNER_EXECUTABLE}
+                           COMMAND "${WAYLAND_SCANNER_EXECUTABLE}"
                                    private-code
-                                   ${XDG_DECORATION_PROTOCOL}
-                                   ${CMAKE_CURRENT_BINARY_DIR}/xdg-decoration-code.c
-                           MAIN_DEPENDENCY ${XDG_DECORATION_PROTOCOL}
-                           DEPENDS ${XDG_DECORATION_PROTOCOL} ${WAYLAND_SCANNER_EXECUTABLE})
+                                   "${XDG_DECORATION_PROTOCOL}"
+                                   "${CMAKE_CURRENT_BINARY_DIR}/xdg-decoration-code.c"
+                           MAIN_DEPENDENCY "${XDG_DECORATION_PROTOCOL}"
+                           DEPENDS "${XDG_DECORATION_PROTOCOL}" "${WAYLAND_SCANNER_EXECUTABLE}")
         add_custom_command(COMMENT "Generating xdg-decoration protocol header"
                            OUTPUT xdg-decoration-client-header.h
-                           COMMAND ${WAYLAND_SCANNER_EXECUTABLE}
+                           COMMAND "${WAYLAND_SCANNER_EXECUTABLE}"
                                    client-header
-                                   ${XDG_DECORATION_PROTOCOL}
-                                   ${CMAKE_CURRENT_BINARY_DIR}/xdg-decoration-client-header.h
-                           MAIN_DEPENDENCY ${XDG_DECORATION_PROTOCOL}
-                           DEPENDS ${XDG_DECORATION_PROTOCOL} ${WAYLAND_SCANNER_EXECUTABLE})
+                                   "${XDG_DECORATION_PROTOCOL}"
+                                   "${CMAKE_CURRENT_BINARY_DIR}/xdg-decoration-client-header.h"
+                           MAIN_DEPENDENCY "${XDG_DECORATION_PROTOCOL}"
+                           DEPENDS "${XDG_DECORATION_PROTOCOL}" "${WAYLAND_SCANNER_EXECUTABLE}")
 
         set(WAYLAND_ADDITIONAL_SOURCES ${CMAKE_CURRENT_BINARY_DIR}/wayland-client.c
                            ${CMAKE_CURRENT_BINARY_DIR}/xdg-shell-code.c
@@ -198,17 +198,17 @@ if (COMPILE_CUBE_SHADERS)
     find_program(GLSLANG_VALIDATOR names glslang glslangValidator HINTS $ENV{GLSLANG_INSTALL_DIR} $ENV{VULKAN_SDK}/bin $ENV{VULKAN_SDK}/Bin)
 
     add_custom_command(COMMENT "Compiling cube vertex shader"
-                    OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/cube.vert.inc
-                    COMMAND ${GLSLANG_VALIDATOR} -V -x -o ${CMAKE_CURRENT_SOURCE_DIR}/cube.vert.inc
-                            ${PROJECT_SOURCE_DIR}/cube/cube.vert
-                    MAIN_DEPENDENCY ${PROJECT_SOURCE_DIR}/cube/cube.vert
-                    DEPENDS ${PROJECT_SOURCE_DIR}/cube/cube.vert ${GLSLANG_VALIDATOR})
+                    OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/cube.vert.inc"
+                    COMMAND "${GLSLANG_VALIDATOR}" -V -x -o "${CMAKE_CURRENT_SOURCE_DIR}/cube.vert.inc"
+                            "${PROJECT_SOURCE_DIR}/cube/cube.vert"
+                    MAIN_DEPENDENCY "${PROJECT_SOURCE_DIR}/cube/cube.vert"
+                    DEPENDS "${PROJECT_SOURCE_DIR}/cube/cube.vert" "${GLSLANG_VALIDATOR}")
     add_custom_command(COMMENT "Compiling cube fragment shader"
-                    OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/cube.frag.inc
-                    COMMAND ${GLSLANG_VALIDATOR} -V -x -o ${CMAKE_CURRENT_SOURCE_DIR}/cube.frag.inc
-                            ${PROJECT_SOURCE_DIR}/cube/cube.frag
-                    MAIN_DEPENDENCY ${PROJECT_SOURCE_DIR}/cube/cube.frag
-                    DEPENDS ${PROJECT_SOURCE_DIR}/cube/cube.frag ${GLSLANG_VALIDATOR})
+                    OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/cube.frag.inc"
+                    COMMAND "${GLSLANG_VALIDATOR}" -V -x -o "${CMAKE_CURRENT_SOURCE_DIR}/cube.frag.inc"
+                            "${PROJECT_SOURCE_DIR}/cube/cube.frag"
+                    MAIN_DEPENDENCY "${PROJECT_SOURCE_DIR}/cube/cube.frag"
+                    DEPENDS "${PROJECT_SOURCE_DIR}/cube/cube.frag" "${GLSLANG_VALIDATOR}")
 endif()
 
 if(WIN32)
@@ -306,13 +306,13 @@ if (ANDROID)
 endif()
 
 if (XCB_LINK_LIBRARIES)
-    target_compile_definitions(vkcube PRIVATE "XCB_LIBRARY=\"${XCB_LINK_LIBRARIES}\"")
+    target_compile_definitions(vkcube PRIVATE "XCB_LIBRARY=\"\\\"${XCB_LINK_LIBRARIES}\\\"\"")
 endif()
 if (X11_LINK_LIBRARIES)
-    target_compile_definitions(vkcube PRIVATE "XLIB_LIBRARY=\"${X11_LINK_LIBRARIES}\"")
+    target_compile_definitions(vkcube PRIVATE "XLIB_LIBRARY=\"\\\"${X11_LINK_LIBRARIES}\\\"\"")
 endif()
 if (WAYLAND_CLIENT_LINK_LIBRARIES)
-    target_compile_definitions(vkcube PRIVATE "WAYLAND_LIBRARY=\"${WAYLAND_CLIENT_LINK_LIBRARIES}\"")
+    target_compile_definitions(vkcube PRIVATE "WAYLAND_LIBRARY=\"\\\"${WAYLAND_CLIENT_LINK_LIBRARIES}\\\"\"")
 endif()
 
 # ----------------------------------------------------------------------------
@@ -359,13 +359,13 @@ target_compile_definitions(vkcubepp PRIVATE ${ENABLED_CUBE_PLATFORMS})
 target_link_libraries(vkcubepp  Vulkan::Headers volk::volk_headers)
 
 if (XCB_LINK_LIBRARIES )
-    target_compile_definitions(vkcubepp PUBLIC "XCB_LIBRARY=\"${XCB_LINK_LIBRARIES}\"")
+    target_compile_definitions(vkcubepp PUBLIC "XCB_LIBRARY=\"\\\"${XCB_LINK_LIBRARIES}\\\"\"")
 endif()
 if (X11_LINK_LIBRARIES)
-    target_compile_definitions(vkcubepp PUBLIC "XLIB_LIBRARY=\"${X11_LINK_LIBRARIES}\"")
+    target_compile_definitions(vkcubepp PUBLIC "XLIB_LIBRARY=\"\\\"${X11_LINK_LIBRARIES}\\\"\"")
 endif()
 if (WAYLAND_CLIENT_LINK_LIBRARIES)
-    target_compile_definitions(vkcubepp PUBLIC "WAYLAND_LIBRARY=\"${WAYLAND_CLIENT_LINK_LIBRARIES}\"")
+    target_compile_definitions(vkcubepp PUBLIC "WAYLAND_LIBRARY=\"\\\"${WAYLAND_CLIENT_LINK_LIBRARIES}\\\"\"")
 endif()
 
 if(APPLE)
